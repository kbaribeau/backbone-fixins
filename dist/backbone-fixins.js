// Generated by CoffeeScript 1.3.1

/*
backbone-fixins 0.0.1
Boilerplate that strengthens your backbone
site: https://github.com/testdouble/backbone-fixins
*/


(function() {
  var Backbone, config, fixins, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  root = this;

  Backbone = root.Backbone;

  if (Backbone == null) {
    throw "backbone-fixins requires Backbone. Make sure you load Backbone first";
  }

  fixins = Backbone.Fixins || (Backbone.Fixins = {});

  /*
  Backbone.Fixins.SuperView
  
  Intended to be a view you can extend that does the typical housekeeping
    of any application-owned view (find template, plug in serialized context, render into element)
  */


  Backbone.Fixins.SuperView = (function(_super) {

    __extends(SuperView, _super);

    SuperView.name = 'SuperView';

    function SuperView() {
      return SuperView.__super__.constructor.apply(this, arguments);
    }

    SuperView.prototype.render = function() {
      var context, f, template, _i, _len, _ref;
      template = config.templateFunction(config.locateTemplate(this));
      context = config.templateContext(this);
      this.$el.html(template(context));
      _ref = _(this).functions();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        if (fixins.helpers.startsWith(f, {
          butIsntExactly: "render"
        })) {
          this[f]();
        }
      }
      return this.trigger('rendered');
    };

    return SuperView;

  })(Backbone.View);

  /*
  Extendable Configuration.
  
  Feel free to extend the configuration to suit your project's needs.
  
  For example, you might write: ???
  */


  config = {
    templateFunction: function(name) {
      return root.JST[name];
    },
    locateTemplate: function(view) {
      var name;
      if (view.template != null) {
        return (typeof view.template === "function" ? view.template() : void 0) || view.template;
      } else {
        name = fixins.helpers.constructorNameOf(view);
        return "templates/" + (fixins.helpers.titleToSnakeCase(name));
      }
    },
    templateContext: function(view) {
      return view.model.toJSON();
    }
  };

  /*
  # Random helpers. Pretend these are private, but I won't hide them
  #   in the event you have a really good reason to override them.
  */


  fixins.helpers = {
    constructorNameOf: function(obj) {
      var results;
      results = /function (.{1,})\(/.exec(obj.constructor.toString());
      if (results && results.length > 1) {
        return results[1];
      } else {
        return "";
      }
    },
    titleToSnakeCase: function(titleCasedString) {
      return titleCasedString.replace(/([a-z\d])([A-Z]+)/g, '$1_$2').replace(/[-\s]+/g, '_').toLowerCase();
    },
    startsWith: function(str, options) {
      var starts;
      starts = options.butIsntExactly;
      return str.length > starts.length && str.substr(0, starts.length) === starts;
    }
  };

}).call(this);
